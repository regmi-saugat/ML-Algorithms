#@ Importing the libraries
import numpy as np
#@ Support Vector Machine Classifier
class SVM_Classifier():
    #@ Initiating the hyperparameter
    def __init__(self, learning_rate, no_of_iterations, lambda_parameter):
        self.learning_rate = learning_rate
        self.no_of_iterations = no_of_iterations
        self.lambda_parameter = lambda_parameter

    #@ Fitting the dataset to SVM Classifier
    def fit(self, X, Y):
        '''m -----> number of data points ----> number of rows
        n -----> number of input features ----> number of columns '''
        self.m, self.m = X.shape
        #@ Initiating weights and bias value
        self.w = np.zeros(self.n)
        self.b = 0
        self.X = X
        self.Y = Y
        #@ Implementing gradient Descent algorithm for Optimization
        for i in range(self.no_of_iterations):
            self.update_weights()

    #@ Function for ipdating the weight and bias parameter
    def update_weights(self):
        y_label = np.where(self.Y <= 0, -1, 1)
        # Building Gradient (dw & db)
        for index, x_i in enumerate(self.X):
            condition = y_label[index] * (np.dot(x_i, self.w) - self.b) >= 1
        if (condition == True):
            dw = 2 * self.lambda_parameter * self.w
            db = 0
        else:
            dw = 2 * self.lambda_parameter * self.w - np.dot(x_i, y_label[index])
            db = y_label[index]

        #@ Updating Gradient Descent
        self.w = self.w - self.learning_rate * dw
        self.b = self.b - self.learning_rate * db

    #@ Predict the label for given input value
    def predict(self, X):
        output = np.dot(X, self.w) - self.b
        predicted_labels = np.sign(output)
        y_hat = np.where(predicted_labels <= -1, 0, 1)
        return y_hat()